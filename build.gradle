buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
apply plugin: 'curseforge'
apply plugin: 'de.undercouch.download'

file "gradle.properties" withReader {
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft.version}-${config.extracarts.version}"
group = "com.scottdta.extracarts"
archivesBaseName = "ExtraCarts"

minecraft {
    version = "${config.minecraft.version}-${config.forge.version}-${config.minecraft.version}"

    replace "@VERSION@", project.version
    replaceIn "ModInfo.java"
}

repositories {
    maven {
        name "Chickenbones"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        name "API Depot"
        url "http://dl.tsr.me/artifactory/libs-release-local"
    }
    maven {
        name 'tterrag Repo'
        url "http://maven.tterrag.com/"
    }
    maven {
        name = "Forestry repo"
        url = "http://maven.ic2.player.to/"
    }
}

dependencies {
    compile "codechicken:NotEnoughItems:${config.minecraft.version}-${config.nei.version}:dev"
    compile "codechicken:CodeChickenCore:${config.minecraft.version}-${config.codechickencore.version}:dev"
    compile "codechicken:CodeChickenLib:${config.minecraft.version}-${config.codechickenlib.version}:dev"
    compile "api:rf:${config.rf.version}"
    /* Couldn't go on without forestry, but server is down currently
    compile("com.enderio:EnderIO:${config.minecraft.version}-${config.enderio.version}:dev") {
        exclude module: "appliedenergistics2"
        exclude module: "buildcraft"
        exclude module: "forestry"
        exclude module: "Waila"
    }*/
    compile files("libs/Minechem-${config.minecraft.version}-${config.minechem.version}.jar")
    compile files("libs/Railcraft_${config.minecraft.version}-${config.railcraft.version}.jar")
    compile files("libs/EnderIO-${config.minecraft.version}-${config.enderio.version}-dev.jar")
    compile files("libs/EnderCore-1.7.10-0.0.1.9_alpha-dev.jar")

}

processResources {
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

    	expand 'version': project.version, 'mcversion': project.minecraft.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def minechemSource = 'https://github.com/jakimfett/Minechem/releases/download/' +
            config.minecraft.version + '-' + config.minechem.version + '/Minechem-' +
            config.minecraft.version + '-' + config.minechem.version + '.jar'

    def minechemDest = new File('libs', 'Minechem-' + config.minecraft.version + '-' + config.minechem.version + '.jar')

    if(!minechemDest.exists() ){
        download {
            src minechemSource
            dest minechemDest
        }
    }

    def railcraftSource = 'https://dl.dropboxusercontent.com/u/38558957/Minecraft/Railcraft/Railcraft_' +
            config.minecraft.version + '-' + config.railcraft.version + '-dev.jar'

    def railcraftDest = new File('libs', 'Railcraft_' + config.minecraft.version + '-' + config.minechem.version + '.jar')

    if(!railcraftDest.exists() ){
        download {
            src railcraftSource
            dest railcraftDest
        }
    }
}

String getChangelogText() {
    def changelogFile = new File('ReleaseNotes.txt')
    String str = ''
    String separator = '---'
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (lineCount < 3) {
            lineCount++
            if (it.startsWith(separator)) {return}
        }
        if (!it.startsWith(separator)) {
            str += "$it" + (lineCount < 3 ? ':\n\n' : '\n')
            return
        }
        done = true // once we go past the first version block, parse no more
    }
    return str
}

curse {
    projectId = config.curse.projectId
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''
    releaseType = 'beta'
    changelog = getChangelogText()
}

build.dependsOn 'getLibraries'